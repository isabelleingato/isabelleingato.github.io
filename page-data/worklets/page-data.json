{"componentChunkName":"component---src-templates-blog-post-js","path":"/worklets/","result":{"data":{"markdownRemark":{"html":"<p>The other day I came across the term \"worklet\" for the first time. I guessed it was maybe a synonym for <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\">web worker</a>. (Reasonable but ultimately incorrect guess!)\n<br><br>\nIf you're new to worklets as well, I recommend reading directly from the <a href=\"https://html.spec.whatwg.org/multipage/worklets.html\">spec</a> for an introduction (a recommendation that holds for pretty much anything I write about on here). The spec will explain things in a more comprehensive and clear way than I ever could in a short blog post. But if you're just looking for a quick gist to determine if these \"worklets\" might be relevant to you, keep on reading.</p>\n<h2>What is a worklet?</h2>\n<p>Let's take a look at a concrete example: the <strong><a href=\"https://drafts.css-houdini.org/css-paint-api/#paint-worklet\">paintWorklet</a></strong>. The paintWorklet enables developers to <em>extend CSS</em> and improve efficiency by providing (higher level) access to the CSS Paint API via a <code>registerPaint</code> function that will instruct the browser's rendering engine to directly draw <em>images</em> on the canvas based on the <code>paint()</code> instructions (<a href=\"https://github.com/w3c/css-houdini-drafts/blob/master/css-paint-api/EXPLAINER.md\">read more</a> and see <a href=\"https://github.com/w3c/css-houdini-drafts/blob/master/css-paint-api/circle/index.html\">example</a>). Notice that the paintWorklet isn't defined by the general developer; rather, the paint function is.\n<br><br>\nEssentially, a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Worklet\">worklet</a> is an <em>extension</em> to a browser's <a href=\"https://docs.google.com/document/d/1wYNK2q_8vQuhVSWyUHZMVPGELzI0CYJ07gTPWP1V1us/edit#heading=h.6cdy1o585rsa\">rendering pipeline</a> with restrictions that <em>maintain</em> the guarantees held by rendering path phases. Unlike web workers, they aren't necessarily run in a separate thread and, accordingly, have additional restrictions on them. Worklets are experimental technologies and are not yet supported in Safari and IE.</p>","frontmatter":{"title":"Working with Worklets","date":"23 December, 2020"}}},"pageContext":{"slug":"/worklets/"}},"staticQueryHashes":[]}